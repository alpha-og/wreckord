1. Start\\
2. Define function for FCFS scheduling\\
\hspace*{1cm} 2.1. Initialize "current\_time" and "total\_waiting" to 0\\
\hspace*{1cm} 2.2. For each process, repeat steps 2.3-2.6 until end of process list\\
\hspace*{1cm} 2.3. Compute completion time\\
\hspace*{1cm} 2.4. Compute turnaround time\\
\hspace*{1cm} 2.5. Compute waiting time and add to "total\_waiting"\\
\hspace*{1cm} 2.6. Update "current\_time"\\
\hspace*{1cm} 2.7. Output average waiting time\\
3. Define function for SJF scheduling\\
\hspace*{1cm} 3.1. Initialize "completed", "total\_waiting", and "current\_time" to 0\\
\hspace*{1cm} 3.2. Track completion status with "is\_completed"\\
\hspace*{1cm} 3.3. While not all processes are completed, repeat steps 3.4-3.8 until all processes are completed\\
\hspace*{1cm} 3.4. Select the shortest available process\\
\hspace*{1cm} 3.5. Compute completion, turnaround, and waiting times\\
\hspace*{1cm} 3.6. Add waiting time to "total\_waiting"\\
\hspace*{1cm} 3.7. Mark process as completed\\
\hspace*{1cm} 3.8. Update "current\_time"\\
\hspace*{1cm} 3.9. Output average waiting time\\
4. Define function for priority scheduling\\
\hspace*{1cm} 4.1. Initialize "completed", "total\_waiting", and "current\_time" to 0\\
\hspace*{1cm} 4.2. Track completion status with "is\_completed"\\
\hspace*{1cm} 4.3. While not all processes are completed, repeat steps 4.4-4.8 until all processes are completed\\
\hspace*{1cm} 4.4. Select highest-priority available process\\
\hspace*{1cm} 4.5. Compute completion, turnaround, and waiting times\\
\hspace*{1cm} 4.6. Add waiting time to "total\_waiting"\\
\hspace*{1cm} 4.7. Mark process as completed\\
\hspace*{1cm} 4.8. Update "current\_time"\\
\hspace*{1cm} 4.9. Output average waiting time\\
5. Define function for round robin scheduling\\
\hspace*{1cm} 5.1. Initialize "current\_time", "completed", and "total\_waiting" to 0\\
\hspace*{1cm} 5.2. Track remaining burst time with "remaining\_time"\\
\hspace*{1cm} 5.3. While not all processes are completed, repeat steps 5.4-5.8 until all processes are completed\\
\hspace*{1cm} 5.4. Select a process with remaining burst time\\
\hspace*{1cm} 5.5. Execute for a time slice or remaining time\\
\hspace*{1cm} 5.6. Update "current\_time" and "remaining\_time"\\
\hspace*{1cm} 5.7. If process completes, compute turnaround and waiting times\\
\hspace*{1cm} 5.8. Update "total\_waiting"\\
\hspace*{1cm} 5.9. Output average waiting time\\
6. Define function for SRTF scheduling\\
\hspace*{1cm} 6.1. Initialize "current\_time", "completed", and "total\_waiting" to 0\\
\hspace*{1cm} 6.2. Track remaining burst time with "remaining\_time"\\
\hspace*{1cm} 6.3. While not all processes are completed, repeat steps 6.4-6.8 until all processes are completed\\
\hspace*{1cm} 6.4. Select process with shortest remaining time\\
\hspace*{1cm} 6.5. Execute for 1 time unit\\
\hspace*{1cm} 6.6. Update "current\_time" and remaining time\\
\hspace*{1cm} 6.7. If process completes, compute turnaround and waiting times\\
\hspace*{1cm} 6.8. Update "total\_waiting"\\
\hspace*{1cm} 6.9. Output average waiting time\\
7. Read number of processes, $n$\\
8. Read process list (ID, Arrival Time, Burst Time, Priority)\\
9. Sort process list by arrival time\\
10. Compute average waiting times using all scheduling algorithms\\
11. Output best scheduling algorithm with lowest average waiting time\\
12. Stop\\
