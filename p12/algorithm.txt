1. Start\\
2. Define "fcfs" to simulate FCFS\\
    2.1. let "current\_time" and "total\_waiting" be 0\\
    2.2. repeat steps-2.3-2.7 for each process until end of process list\\
    2.3. compute the completion time based on current time, arrival time and burst time of the process
    2.4. compute the turnaround time based on completion time and arrival time of the process
    2.5. compute the waiting time based on turnaround time and burst time of the process
    2.6. add the waiting time to "total\_waiting"
    2.7. update "current\_time" to the completion time of the process
    2.8. output the average waiting time\\
3. Define "sjf" to simulate SJF\\
    3.1. let "completed", "total\_waiting" and "current\_time" be 0\\
    3.2. let "is\_completed" be an array used to track the completion status of each process
    3.3. repeat steps-3.4-3.10 until all processes are completed\\
    3.4. find a process from the process list which hasnt been completed having least burst time which arrived at a time before current time
    3.5. compute the completion time based on current time and burst time of the process
    3.6. compute the turnaround time based on completion time and arrival time of the process
    3.7. compute the waiting time based on turnaround time and burst time of the process
    3.8. add the waiting time to "total\_waiting"
    3.9. mark the process as completed
    3.10. update "current\_time" to the completion time of the process
    3.11. output the average waiting time\\
4. Define "priority\_scheduling" to simulate Priority Scheduling\\
    4.1. let "completed", "total\_waiting" and "current\_time" be 0\\
    4.2. let "is\_completed" be an array used to track the completion status of each process
    4.3. repeat steps-4.4-4.10 until all processes are completed\\
    4.4. find a process from the process list which hasnt been completed having highest priority which arrived at a time before current time
    4.5. compute the completion time based on current time and burst time of the process
    4.6. compute the turnaround time based on completion time and arrival time of the process
    4.7. compute the waiting time based on turnaround time and burst time of the process
    4.8. add the waiting time to "total\_waiting"
    4.9. mark the process as completed
    4.10. update "current\_time" to the completion time of the process
    4.11. output the average waiting time\\
5. Define "round\_robin" to simulate Round Robin Scheduling\\
    5.1. let "current\_time", "completed" and "total\_waiting" be 0\\
    5.2. let "remaining\_time" be an array used to track the remaining burst time of each process
    5.3. repeat steps-5.4-5.9 until all processes are completed\\
    5.4. find a process from the process list having remaining burst time greater than 0
    5.5. compute the execution time based on remaining burst time of the process
    5.6. increment the current time by the execution time
    5.7. decrement the remaining burst time of the process by the execution time
    5.8. if the remaining burst time of the process is 0, mark the process as completed, compute the turnaround and waiting time
    5.9. update total waiting time by the waiting time of the process
    5.10. output the average waiting time\\
6. Define "srtf" to simulate SRTF Scheduling\\
    6.1. let "current\_time", "completed" and "total\_waiting" be 0\\
    6.2. let "remaining\_time" be an array used to track the remaining burst time of each process
    6.3. repeat steps-6.4-6.9 until all processes are completed\\
    6.4. find a process from the process list having remaining burst time greater than 0 such that its remaining time is least among all processes, which arrived at a time before current time
    6.5. decrement the remaining burst time of the process by 1
    6.6. increment the current time by 1
    6.7. if the remaining burst time of the process is 0, mark the process as completed, compute the turnaround and waiting time
    6.8. update total waiting time by the waiting time of the process
    6.9. output the average waiting time\\
7. Read the number of processes, $n$\\
8. Read the process list\\
    8.1 Read the process ID, Arrival Time, Burst Time, Priority\\
    8.2 Repeat step 3.1 for $n$ times\\
9. Sort the process list by arrival time\\
10. Obtain the average waiting time for each scheduling algorithm by calling the corresponding function
11. Output the best scheduling algorithm with the average waiting time
12. Stop
