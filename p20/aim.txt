The time command can be used to know the actual time taken to execute a command. For example time ls will tell you how much time it took to execute the ls. Let us now build our version of time. You need to create a command exectime that will be run as "exectime cmnd" and will report the amount of elapsed time to run the specified command cmnd. (For this, you need to write a program time.c (or with any other name) and compile to an executable exectime and then copy it to the /usr/bin directory as was discussed in the class.) The strategy is to fork a child process that will execute the specified command using execvp(). However, the child, before it executes the command, will record a timestamp of the current time (call it starting time). The parent process will wait for the child process to terminate. Once the child terminates, the parent will record the current timestamp (call it ending time). The difference between the starting and ending times represents the elapsed time to execute the command. As the parent and child are separate processes, they will need to arrange how the starting time will be shared between them. For our case, you will use shared memory. The child process should write the starting time to a region of shared memory before it calls execvp(). After the child process terminates, the parent will read the starting time from shared memory and proceed with calculating the elapsed time. You should use the gettimeofday() system call to record the current timestamp.

